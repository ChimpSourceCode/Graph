// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class onBidPlaced extends ethereum.Event {
  get params(): onBidPlaced__Params {
    return new onBidPlaced__Params(this);
  }
}

export class onBidPlaced__Params {
  _event: onBidPlaced;

  constructor(event: onBidPlaced) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class onRefundClaimed extends ethereum.Event {
  get params(): onRefundClaimed__Params {
    return new onRefundClaimed__Params(this);
  }
}

export class onRefundClaimed__Params {
  _event: onRefundClaimed;

  constructor(event: onRefundClaimed) {
    this._event = event;
  }

  get param0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ChimpAuction extends ethereum.SmartContract {
  static bind(address: Address): ChimpAuction {
    return new ChimpAuction("ChimpAuction", address);
  }

  bids(param0: Address): BigInt {
    let result = super.call("bids", "bids(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_bids(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bids", "bids(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAuctionEnabled(): boolean {
    let result = super.call(
      "isAuctionEnabled",
      "isAuctionEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isAuctionEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAuctionEnabled",
      "isAuctionEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isClaimRefundEnabled(): boolean {
    let result = super.call(
      "isClaimRefundEnabled",
      "isClaimRefundEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isClaimRefundEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isClaimRefundEnabled",
      "isClaimRefundEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minBidAmount(): BigInt {
    let result = super.call("minBidAmount", "minBidAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minBidAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minBidAmount", "minBidAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  refundClaimed(param0: Address): boolean {
    let result = super.call("refundClaimed", "refundClaimed(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_refundClaimed(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "refundClaimed",
      "refundClaimed(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  refundMerkleRoot(): Bytes {
    let result = super.call(
      "refundMerkleRoot",
      "refundMerkleRoot():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_refundMerkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "refundMerkleRoot",
      "refundMerkleRoot():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  totalBidders(): BigInt {
    let result = super.call("totalBidders", "totalBidders():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBidders(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBidders", "totalBidders():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBids(): BigInt {
    let result = super.call("totalBids", "totalBids():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBids(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBids", "totalBids():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isQualifiedForRefund(addr: Address, _merkleProof: Array<Bytes>): boolean {
    let result = super.call(
      "isQualifiedForRefund",
      "isQualifiedForRefund(address,bytes32[]):(bool)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromFixedBytesArray(_merkleProof)
      ]
    );

    return result[0].toBoolean();
  }

  try_isQualifiedForRefund(
    addr: Address,
    _merkleProof: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isQualifiedForRefund",
      "isQualifiedForRefund(address,bytes32[]):(bool)",
      [
        ethereum.Value.fromAddress(addr),
        ethereum.Value.fromFixedBytesArray(_merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class FlipAuctionStateCall extends ethereum.Call {
  get inputs(): FlipAuctionStateCall__Inputs {
    return new FlipAuctionStateCall__Inputs(this);
  }

  get outputs(): FlipAuctionStateCall__Outputs {
    return new FlipAuctionStateCall__Outputs(this);
  }
}

export class FlipAuctionStateCall__Inputs {
  _call: FlipAuctionStateCall;

  constructor(call: FlipAuctionStateCall) {
    this._call = call;
  }
}

export class FlipAuctionStateCall__Outputs {
  _call: FlipAuctionStateCall;

  constructor(call: FlipAuctionStateCall) {
    this._call = call;
  }
}

export class FlipClaimRefundCall extends ethereum.Call {
  get inputs(): FlipClaimRefundCall__Inputs {
    return new FlipClaimRefundCall__Inputs(this);
  }

  get outputs(): FlipClaimRefundCall__Outputs {
    return new FlipClaimRefundCall__Outputs(this);
  }
}

export class FlipClaimRefundCall__Inputs {
  _call: FlipClaimRefundCall;

  constructor(call: FlipClaimRefundCall) {
    this._call = call;
  }
}

export class FlipClaimRefundCall__Outputs {
  _call: FlipClaimRefundCall;

  constructor(call: FlipClaimRefundCall) {
    this._call = call;
  }
}

export class SetMinBidAmountCall extends ethereum.Call {
  get inputs(): SetMinBidAmountCall__Inputs {
    return new SetMinBidAmountCall__Inputs(this);
  }

  get outputs(): SetMinBidAmountCall__Outputs {
    return new SetMinBidAmountCall__Outputs(this);
  }
}

export class SetMinBidAmountCall__Inputs {
  _call: SetMinBidAmountCall;

  constructor(call: SetMinBidAmountCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinBidAmountCall__Outputs {
  _call: SetMinBidAmountCall;

  constructor(call: SetMinBidAmountCall) {
    this._call = call;
  }
}

export class PlaceBidCall extends ethereum.Call {
  get inputs(): PlaceBidCall__Inputs {
    return new PlaceBidCall__Inputs(this);
  }

  get outputs(): PlaceBidCall__Outputs {
    return new PlaceBidCall__Outputs(this);
  }
}

export class PlaceBidCall__Inputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }
}

export class PlaceBidCall__Outputs {
  _call: PlaceBidCall;

  constructor(call: PlaceBidCall) {
    this._call = call;
  }
}

export class WithdrawETHCall extends ethereum.Call {
  get inputs(): WithdrawETHCall__Inputs {
    return new WithdrawETHCall__Inputs(this);
  }

  get outputs(): WithdrawETHCall__Outputs {
    return new WithdrawETHCall__Outputs(this);
  }
}

export class WithdrawETHCall__Inputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawETHCall__Outputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }
}

export class SetRefundMerkleRootCall extends ethereum.Call {
  get inputs(): SetRefundMerkleRootCall__Inputs {
    return new SetRefundMerkleRootCall__Inputs(this);
  }

  get outputs(): SetRefundMerkleRootCall__Outputs {
    return new SetRefundMerkleRootCall__Outputs(this);
  }
}

export class SetRefundMerkleRootCall__Inputs {
  _call: SetRefundMerkleRootCall;

  constructor(call: SetRefundMerkleRootCall) {
    this._call = call;
  }

  get root(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetRefundMerkleRootCall__Outputs {
  _call: SetRefundMerkleRootCall;

  constructor(call: SetRefundMerkleRootCall) {
    this._call = call;
  }
}

export class ClaimRefundCall extends ethereum.Call {
  get inputs(): ClaimRefundCall__Inputs {
    return new ClaimRefundCall__Inputs(this);
  }

  get outputs(): ClaimRefundCall__Outputs {
    return new ClaimRefundCall__Outputs(this);
  }
}

export class ClaimRefundCall__Inputs {
  _call: ClaimRefundCall;

  constructor(call: ClaimRefundCall) {
    this._call = call;
  }

  get _merkleProof(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class ClaimRefundCall__Outputs {
  _call: ClaimRefundCall;

  constructor(call: ClaimRefundCall) {
    this._call = call;
  }
}
